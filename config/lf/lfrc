# interpreter for shell commands (needs to be POSIX compatible)
set shell sh

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

#emacs-like bindings
map <c-n> down
map <c-p> up
map <c-j> open
map <c-k> updir
map <lt> top
map <gt> bottom
map <c-v> page-down
map <a-v> page-up
map <c-g> quit


map <a-w> copy
map <c-y> paste

# use enter for shell commands
map <enter> shell
map S !$SHELL

# execute current file (must be executable)
map x $$f
map X !$f

map e $ $EDITOR $f

# dedicated keys for file opener actions
map o &mimeopen $f
map O $mimeopen --ask $f

#file manipulation
map D delete
cmd symlink %{{
    load=$(lf -remote 'load')
    mode=$(echo "$load" | sed -n '1p')
    list=$(echo "$load" | sed '1d')
    if [ $mode = 'copy' ]; then
        ln -s $list .
    fi
    lf -remote 'send load'
    lf -remote 'send clear'
}}

cmd paste_overwrite %{{
    load=$(lf -remote 'load')
    mode=$(echo "$load" | sed -n '1p')
    list=$(echo "$load" | sed '1d')
    if [ $mode = 'copy' ]; then
        cp $list .
    fi
    lf -remote 'send load'
    lf -remote 'send clear'
}}
map p
map pp paste
map pl symlink
map po paste_overwrite

map +ur &chmod u+r $fx;  lf -remote "send $id reload"
map -ur &chmod u-r $fx;  lf -remote "send $id reload"
map +gr &chmod g+r $fx;  lf -remote "send $id reload"
map -gr &chmod g-r $fx;  lf -remote "send $id reload"
map +or &chmod o+r $fx;  lf -remote "send $id reload"
map +or &chmod o+r $fx;  lf -remote "send $id reload"
map -ar &chmod a-r $fx;  lf -remote "send $id reload"
map -ar &chmod a-r $fx;  lf -remote "send $id reload"

map +uw &chmod u+w $fx;  lf -remote "send $id reload"
map -uw &chmod u-w $fx;  lf -remote "send $id reload"
map +gw &chmod g+w $fx;  lf -remote "send $id reload"
map -gw &chmod g-w $fx;  lf -remote "send $id reload"
map +ow &chmod o+w $fx;  lf -remote "send $id reload"
map +ow &chmod o+w $fx;  lf -remote "send $id reload"
map -aw &chmod a-w $fx;  lf -remote "send $id reload"
map -aw &chmod a-w $fx;  lf -remote "send $id reload"

map +ux &chmod u+x $fx;  lf -remote "send $id reload"
map -ux &chmod u-x $fx;  lf -remote "send $id reload"
map +gx &chmod g+x $fx;  lf -remote "send $id reload"
map -gx &chmod g-x $fx;  lf -remote "send $id reload"
map +ox &chmod o+x $fx;  lf -remote "send $id reload"
map +ox &chmod o+x $fx;  lf -remote "send $id reload"
map -ax &chmod a-x $fx;  lf -remote "send $id reload"
map -ax &chmod a-x $fx;  lf -remote "send $id reload"

map +uX &chmod u+X $fx;  lf -remote "send $id reload"
map -uX &chmod u-X $fx;  lf -remote "send $id reload"
map +gX &chmod g+X $fx;  lf -remote "send $id reload"
map -gX &chmod g-X $fx;  lf -remote "send $id reload"
map +oX &chmod o+X $fx;  lf -remote "send $id reload"
map +oX &chmod o+X $fx;  lf -remote "send $id reload"
map -aX &chmod a-X $fx;  lf -remote "send $id reload"
map -aX &chmod a-X $fx;  lf -remote "send $id reload"

map +us &chmod u+s $fx;  lf -remote "send $id reload"
map -us &chmod u-s $fx;  lf -remote "send $id reload"
map +gs &chmod g+s $fx;  lf -remote "send $id reload"
map -gs &chmod g-s $fx;  lf -remote "send $id reload"
map +os &chmod o+s $fx;  lf -remote "send $id reload"
map +os &chmod o+s $fx;  lf -remote "send $id reload"
map -as &chmod a-s $fx;  lf -remote "send $id reload"
map -as &chmod a-s $fx;  lf -remote "send $id reload"

map +ut &chmod u+t $fx;  lf -remote "send $id reload"
map -ut &chmod u-t $fx;  lf -remote "send $id reload"
map +gt &chmod g+t $fx;  lf -remote "send $id reload"
map -gt &chmod g-t $fx;  lf -remote "send $id reload"
map +ot &chmod o+t $fx;  lf -remote "send $id reload"
map +ot &chmod o+t $fx;  lf -remote "send $id reload"
map -at &chmod a-t $fx;  lf -remote "send $id reload"
map -at &chmod a-t $fx;  lf -remote "send $id reload"

#special directories
map g.c cd ~/.config
map g.C cd ~/configs
map gr cd /

#fasd
cmd fasd_cd $lf -remote "send $id cd '$(fasd -sid $@)'"
map gf push :fasd_cd<space>

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open ${{

    case $(file --mime-type $f -b) in
        text/*) $EDITOR $fx;;
        *) for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

# rename current file without overwrite
cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
map r push :rename<space>
map R $lf -remote "send $id push :rename<space>'$(basename $f | sed 's/ /<space>/g')'<left>"



# make sure trash folder exists
# %mkdir -p ~/.trash

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
cmd trash %set -f; mv $fx ~/.trash

# define a custom 'delete' command
# cmd delete ${{
#     set -f
#     printf "$fx\n"
#     printf "delete?[y/n]"
#     read ans
#     [ $ans = "y" ] && rm -rf $fx
# }}

# use '<delete>' key for either 'trash' or 'delete' command
# map <delete> trash
# map <delete> delete

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}
